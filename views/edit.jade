extends layout

block extraHeader
	script(type='text/javascript', src='javascripts/interact.min.js')


block content
	img.contain.selectDisable(src="/tmp/" + root)
	div.full-page
		div.markers.draggable
	//div.navbar.navbar-fixed-bottom.footer.franklin-gothic.uppercase
		div.col-lg-4.col-sm-4
			h3 "Step 1"
		div.col-lg-4.col-sm-4
			h3 "Step 2"
		div.col-lg-4.col-sm-4
			h3 "Step 3"

	span.rotated
		


	script.
		// target elements with the "draggable" class
		interact('.draggable')
		  .draggable({
			// enable inertial throwing
			inertia: {
			resistance: 30,
			minSpeed: 200,
			endSpeed: 100
		  },
			// keep the element within the area of it's parent
			restrict: {
			  restriction: document.getElementsByClassName('contain')[0],
			  endOnly: false,
			  elementRect: { top: 1, left: .4, bottom: .97, right: .6 }
			},
			// enable autoScroll
			autoScroll: true,

			// call this function on every dragmove event
			onmove: dragMoveListener,
			// call this function on every dragend event
			onend: function(event) {
			  console.log(interact('.draggable').getRect('div.marker'));
			}
		  });

		function dragMoveListener (event) {
			var target = event.target,
				// keep the dragged position in the data-x/data-y attributes
				x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
				y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

			// translate the element
			target.style.webkitTransform =
			target.style.transform =
			  'translate(' + x + 'px, ' + y + 'px) rotate(-45deg)';

			// update the posiion attributes
			target.setAttribute('data-x', x);
			target.setAttribute('data-y', y);
		}

		// this is used later in the resizing and gesture demos
		window.dragMoveListener = dragMoveListener;
