extends layout

block extraHeader
	script(type='text/javascript', src='javascripts/interact.min.js')


block content
	div.container
		div.row
			div.col-lg-12.col-sm-8
				div.center-container
					img.contain.selectDisable(src="/tmp/" + root)
				div.markers.draggable
	div.navbar.navbar-fixed-bottom.footer.franklin-gothic.uppercase
		div.col-lg-4.col-sm-4
			h3 "Step 1"
		div.col-lg-4.col-sm-4
			h3 "Step 2"
		div.col-lg-4.col-sm-4
			h3 "Step 3"

	span.rotated
		


	script.
		interact('.draggable')
		  .draggable({
		    // enable inertial throwing
		    inertia: true,
		    // keep the element within the area of it's parent
		    restrict: {
		      restriction: "img",
		      endOnly: true,
		      elementRect: { top: 0, left: 0, bottom: 0, right: 0 }
		    },
		    // enable autoScroll
		    autoScroll: true,

		    // call this function on every dragmove event
		    onmove: dragMoveListener,
		    // call this function on every dragend event
		    onend: function (event) {
		      var textEl = event.target.querySelector('p');

		      textEl && (textEl.textContent =
		        'moved a distance of '
		        + (Math.sqrt(event.dx * event.dx +
		                     event.dy * event.dy)|0) + 'px');
		    }
		  });

		  function dragMoveListener (event) {
		    var target = event.target,
		        // keep the dragged position in the data-x/data-y attributes
		        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
		        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

		    // translate the element
		    target.style.webkitTransform =
		    target.style.transform =
		      'translate(' + x + 'px, ' + y + 'px)';

		    // update the posiion attributes
		    target.setAttribute('data-x', x);
		    target.setAttribute('data-y', y);
		  }

		  // this is used later in the resizing and gesture demos
		  window.dragMoveListener = dragMoveListener;